{"filter":false,"title":"microposts_interface_test.rb","tooltip":"/test/integration/microposts_interface_test.rb","undoManager":{"mark":2,"position":2,"stack":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":7,"column":0}},"nl":"\n","lines":["require 'test_helper'","","class MicropostsInterfaceTest < ActionDispatch::IntegrationTest","  # test \"the truth\" do","  #   assert true","  # end","end"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":21}},"text":"require 'test_helper'"},{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":32,"column":0}},"lines":["","class MicropostInterfaceTest < ActionDispatch::IntegrationTest","","  def setup","    @user = users(:michael)","  end","","  test \"micropost interface\" do","    log_in_as(@user)","    get root_path","    assert_select 'div.pagination'","    # Invalid submission","    post microposts_path, micropost: { content: \"\" }","    assert_select 'div#error_explanation'","    # Valid submission","    content = \"This micropost really ties the room together\"","    assert_difference 'Micropost.count', 1 do","      post microposts_path, micropost: { content: content }","    end","    follow_redirect!","    assert_match content, response.body","    # Delete a post.","    assert_select 'a', 'delete'","    first_micropost = @user.microposts.paginate(page: 1).first","    assert_difference 'Micropost.count', -1 do","      delete micropost_path(first_micropost)","    end","    # Visit a different user.","    get user_path(users(:archer))","    assert_select 'a', { text: 'delete', count: 0 }","  end"]},{"action":"insertText","range":{"start":{"row":32,"column":0},"end":{"row":32,"column":3}},"text":"end"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":32,"column":3},"end":{"row":32,"column":4}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":32,"column":0},"end":{"row":32,"column":4}},"text":"end "},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":32,"column":0}},"nl":"\n","lines":["require 'test_helper'","","class MicropostInterfaceTest < ActionDispatch::IntegrationTest","","  def setup","    @user = users(:michael)","  end","","  test \"micropost interface\" do","    log_in_as(@user)","    get root_path","    assert_select 'div.pagination'","    # Invalid submission","    post microposts_path, micropost: { content: \"\" }","    assert_select 'div#error_explanation'","    # Valid submission","    content = \"This micropost really ties the room together\"","    assert_difference 'Micropost.count', 1 do","      post microposts_path, micropost: { content: content }","    end","    follow_redirect!","    assert_match content, response.body","    # Delete a post.","    assert_select 'a', 'delete'","    first_micropost = @user.microposts.paginate(page: 1).first","    assert_difference 'Micropost.count', -1 do","      delete micropost_path(first_micropost)","    end","    # Visit a different user.","    get user_path(users(:archer))","    assert_select 'a', { text: 'delete', count: 0 }","  end"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":21}},"text":"require 'test_helper'"},{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":32,"column":0}},"lines":["","class MicropostInterfaceTest < ActionDispatch::IntegrationTest","","  def setup","    @user = users(:michael)","  end","","  test \"micropost interface\" do","    log_in_as(@user)","    get root_path","    assert_select 'div.pagination'","    # Invalid submission","    post microposts_path, micropost: { content: \"\" }","    assert_select 'div#error_explanation'","    # Valid submission","    content = \"This micropost really ties the room together\"","    assert_difference 'Micropost.count', 1 do","      post microposts_path, micropost: { content: content }","    end","    follow_redirect!","    assert_match content, response.body","    # Delete a post.","    assert_select 'a', 'delete'","    first_micropost = @user.microposts.paginate(page: 1).first","    assert_difference 'Micropost.count', -1 do","      delete micropost_path(first_micropost)","    end","    # Visit a different user.","    get user_path(users(:archer))","    assert_select 'a', { text: 'delete', count: 0 }","  end"]},{"action":"insertText","range":{"start":{"row":32,"column":0},"end":{"row":32,"column":3}},"text":"end"}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":32,"column":3},"end":{"row":32,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1414968493377,"hash":"c66844667c2e2fefc0fa103cbc3d7384b9ebab37"}