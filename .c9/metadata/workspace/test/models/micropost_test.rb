{"filter":false,"title":"micropost_test.rb","tooltip":"/test/models/micropost_test.rb","undoManager":{"mark":5,"position":5,"stack":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":7,"column":0}},"nl":"\n","lines":["require 'test_helper'","","class MicropostTest < ActiveSupport::TestCase","  # test \"the truth\" do","  #   assert true","  # end","end"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":21}},"text":"require 'test_helper'"},{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":18,"column":0}},"lines":["","class MicropostTest < ActiveSupport::TestCase","","  def setup","    @user = users(:michael)","    # This code is not idiomatically correct.","    @micropost = Micropost.new(content: \"Lorem ipsum\", user_id: @user.id)","  end","","  test \"micropost should be valid\" do","    assert @micropost.valid?","  end","","  test \"user id should be present\" do","    @micropost.user_id = nil","    assert_not @micropost.valid?","  end"]},{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":3}},"text":"end"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":3}},"text":"end"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":18,"column":0}},"nl":"\n","lines":["require 'test_helper'","","class MicropostTest < ActiveSupport::TestCase","","  def setup","    @user = users(:michael)","    # This code is not idiomatically correct.","    @micropost = Micropost.new(content: \"Lorem ipsum\", user_id: @user.id)","  end","","  test \"micropost should be valid\" do","    assert @micropost.valid?","  end","","  test \"user id should be present\" do","    @micropost.user_id = nil","    assert_not @micropost.valid?","  end"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":21}},"text":"require 'test_helper'"},{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":17,"column":0}},"lines":["","class MicropostTest < ActiveSupport::TestCase","","  def setup","    @user = users(:michael)","    @micropost = @user.microposts.build(content: \"Lorem ipsum\")","  end","","  test \"micropost should be valid\" do","    assert @micropost.valid?","  end","","  test \"user id should be present\" do","    @micropost.user_id = nil","    assert_not @micropost.valid?","  end"]},{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":17,"column":3}},"text":"end"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":16,"column":5},"end":{"row":17,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":17,"column":0},"end":{"row":17,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":2},"end":{"row":18,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":18,"column":0},"end":{"row":18,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":18,"column":2},"end":{"row":18,"column":45}},"text":"test \"order should be most recent first\" do"},{"action":"insertText","range":{"start":{"row":18,"column":45},"end":{"row":19,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":19,"column":0},"end":{"row":20,"column":0}},"lines":["    assert_equal Micropost.first, microposts(:most_recent)"]},{"action":"insertText","range":{"start":{"row":20,"column":0},"end":{"row":20,"column":5}},"text":"  end"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":3}},"text":"end"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":21,"column":0}},"nl":"\n","lines":["require 'test_helper'","","class MicropostTest < ActiveSupport::TestCase","","  def setup","    @user = users(:michael)","    @micropost = @user.microposts.build(content: \"Lorem ipsum\")","  end","","  test \"micropost should be valid\" do","    assert @micropost.valid?","  end","","  test \"user id should be present\" do","    @micropost.user_id = nil","    assert_not @micropost.valid?","  end","  ","  test \"order should be most recent first\" do","    assert_equal Micropost.first, microposts(:most_recent)","  end"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":21}},"text":"require 'test_helper'"},{"action":"insertText","range":{"start":{"row":0,"column":21},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":31,"column":0}},"lines":["","class MicropostTest < ActiveSupport::TestCase","","  def setup","    @user = users(:michael)","    @micropost = @user.microposts.build(content: \"Lorem ipsum\")","  end","","  test \"micropost should be valid\" do","    assert @micropost.valid?","  end","","  test \"user id should be present\" do","    @micropost.user_id = nil","    assert_not @micropost.valid?","  end","","  test \"content should be present \" do","    @micropost.content = \" \"","    assert_not @micropost.valid?","  end","","  test \"content should be at most 140 characters\" do","    @micropost.content = \"a\" * 141","    assert_not @micropost.valid?","  end","","  test \"order should be most recent first\" do","    assert_equal Micropost.first, microposts(:most_recent)","  end"]},{"action":"insertText","range":{"start":{"row":31,"column":0},"end":{"row":31,"column":3}},"text":"end"}]}]]},"ace":{"folds":[],"scrolltop":120,"scrollleft":0,"selection":{"start":{"row":31,"column":3},"end":{"row":31,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1414966115274,"hash":"3ff8eedcb72f5941aea599efa3f2bba81372862f"}